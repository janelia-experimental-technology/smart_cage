* SmartCage Software Proposal

** Description

   The SmartCage system allows mice to perform voluntary head-fixations in their
   home cages to facilitate behavior training and experiments without human
   supervision.

** Overview

   A researcher manages a set of SmartCages and mice, setting up behavior
   training or experiments which will run automatically and independently on
   each SmartCage. The researcher may monitor the set of SmartCages remotely or
   in-person and intervene if needed, but direct supervision is not necessary
   for operation.

   Each SmartCage contains a mouse with a headbar and consists of a typical
   mouse cage with a tunnel module and task module attached. The tunnel module
   has sensors for detecting the mouse position and motion and motorized latches
   for head-fixing the mouse. The task module has sensors for collecting data
   and actuators for interacting with the mouse.

   A SmartCage runs a course of training or experiments lasting approximately
   one month. A course is a series of sessions, one session per day, each
   lasting about half a day. A session is a series of trials, each trial lasting
   somewhere between half a minute to half an hour.

   Control and data collection in the SmartCage system is handled by a variety
   of hardware and software components, communicating with each other to
   coordinate.

** Svoboda Lab Software Request

*** Matlab Bpod

    - integrate the existing Python and Matlab scripts
    - easily communicate between Matlab code (Bpod) and Python code (SmartCage)
      using the Robot Operating System (ROS)
    - create a GUI to quickly browse through/monitor all the mice training
      states
    - alarm systems to notify users when either component crashes or mice do not
      perform well
    - want to be able to have multiple mice automatically train themselves
    - want to monitor their health/training remotely 24/7

*** Python Bpod

    - provide example code showing the PyBpod scripts can control the SmartCage
      (e.g. lickport positions, latching) via ROS
    - alarm systems to notify users when either component crashes or mice do not
      peroform well

** Details

   A SmartCage consists of a regular mouse cage with a hole cut into it and a
   tunnel module attached to it. A variety of task modules may be attached to
   the tunnel module.

   The tunnel module contains two latches at the end of the tunnel farthest from
   the cage, one on the mouse's left side when facing out of the tunnel and the
   other on the right side. Each latch has a home switch, which is triggered
   when the latch is fully open, and a headbar switch, which is triggered when
   the mouse presses its headbar into it. A sensor on the floor of the tunnel
   measures the force the head-fixed mouse applies to the floor when it presses
   down upon it. The tunnel module also contains a digital output for
   communicating with other electronic hardware in the system and a digital
   input which can be connected to an emergency stop switch.

   The first task module to be developed is a motorized lickport used for
   dispensing water to the mouse at various positions and for sensing mouse
   licks. The lickport contains three motors, each with its own home switch, for
   moving the lickport in three orthogonal directions. The lickport module may
   contain multiple lickports, each with a solenoid valve for dispensing water
   and a sensor for detecting licks.

   Each SmartCage contains three cameras, one viewing the mouse from the front
   when it is latched in the tunnel, one viewing the side, and the third viewing
   the top.

   A SmartCage runs a course of training or experiments lasting approximately
   one month. Each SmartCage contains a single mouse and only that mouse is in
   the cage for the entire course.

   A set of SmartCages may run their courses simultaneously, but independently,
   of one another. Each SmartCage course may start or stop according to its own
   schedule, which may not necessarily be synchronized with the courses running
   on other SmartCages in the set.

   Each course consists of a set of sessions. One, and only one, session runs on
   each day of the course for part of the day. The actuators may only be active
   during the session, but the sensors may be active all day.

   Each session consists of a series of trials. Each trial may be as short as a
   few seconds or as long as half an hour or so.

   The researcher sets the time of day to start the session and the maximum
   duration of the session for that day. A typical session duration might be 12
   hours. The researcher also sets the maximum number of trials per session, for
   example 800 trials per session. The trial counter resets to zero at the start
   of every session and is incremented at the start of every new trial,
   regardless of whether the previous trial ended successfully or not.

   A session ends when either the maximum duration of the session is
   exceeded or the maximum number of trials set for the session is exceeded or
   if the session is aborted in software, whichever comes first.

   A new trial is started when the mouse enters the tunnel from the cage and
   triggers one or both of the headbar sensors, depending on the researcher
   setting, at the end of the tunnel. When a new trial is started, the digital
   output signals a square wave until the trial ends. When a session or trial is
   not active, the digital output line will remain low.

   The tunnel module may be in one of two modes, latch mode true and latch mode
   false. When the latch mode is true, the start of the trial causes the latches
   to close and remain closed until the end of the trial. When latch mode is
   false, the latches never close.

   The latch mode will be specified before a session starts, but the latch mode
   may be changed by a software command while the session is running. Changing
   the latch mode will take effect at the start of the next trial in the
   session.

   The latch mode will typically be false for some number of sessions at the
   beginning of a course. After that number of sessions has been exceeded, the
   remaining sessions will typically have latch mode set to true until the end
   of the course.

   When the latch mode is false, the trial ends as soon as both headbar sensors
   are unpressed. The digital output will be active during the trial. The floor
   sensor measurements and the abort signals, from either a software command or
   an emergency stop switch press, will all be ignored. A new trial may begin
   immediately after the end of a previous trial when one or both of the headbar
   sensors are pressed, depending on the researcher setting. All trials will be
   considered successful.

   When the latch mode is true, the trial ends when either the latch duration is
   exceeded, when the floor sensor threshold is exceeded, or if the trial is
   aborted from either a software command or an emergency stop switch press. A
   trial is considered successful if the latch duration is exceeded and
   considered a failure otherwise.

   When a trial is aborted by a software command it means the mouse was
   exhibiting bad performance during the trial.

   The tunnel floor sensor threshold will be specified before a session starts,
   but the threshold may be changed by a software command while the session is
   running. Changing the threshold value will take effect immediately, even if
   it occurs in the middle of a trial.

   The latch duration will be taken from an array of latch durations specified
   when starting a course. The first time the latch mode is set to true, the
   latch duration used for the next trial will be the first element in the latch
   duration array. If the trial is considered a success, then the next latch
   duration will be set to the next value in the latch duration array. If there
   are no more elements in the latch duration array, the last value of the array
   will be used for all following trials in the course. If the trial is
   considered a failure, then the latch duration from the failed trial will be
   used again and the latch duration array index will not be incremented.

   The lickport 3-axis position may be changed at any time during a session with
   a software command. When a session is not running, the lickport will be
   disabled and software commands will be ignored until a new session starts.

   A watchdog will be used to detect external software crashes. Software
   messages must be sent regularly to the watchdog. If the watchdog does not
   receive a message within a period of time set by the researcher, then the
   watchdog assumes the external software has crashed or become unresponsive.

   An alarm system will trigger an alarm when it detects a problem. Triggering
   an alarm opens the latches, if possible, ends the current trial and session,
   if they are running, and sends an email to the researcher.

   An alarm will be triggered if the watchdog detects an external software
   crash. An alarm will be triggered at the end of a session if no trials were
   started in the entire session. An alarm will be triggered if both headbar
   sensors become unpressed while the latches are closed. Alarms may be
   triggered by external software commands. For example, if external software
   determines that the mouse has bad performance, then it may send a command to
   the alarm system, triggering an alarm and supplying a message to be included
   in the alarm email.

** Operation

   When first powering up the SmartCage, the software will start running and
   wait idly for messages from external software. All messages from external
   software will be ignored except for a message to start a course.

   Starting a course requires sending a message to a particular SmartCage,
   specifying the name of the mouse that will be living in the cage for the
   duration of the course, and the array of latch durations with units of
   seconds.

   When a course is started, the latches are homed and left open, the digital
   output is set low, and the lickport motors are homed and left at the 3-axis
   home position.


** Architecture



** Time Estimates

| task | hours |
|      |       |
