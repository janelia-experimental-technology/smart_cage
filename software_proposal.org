* SmartCage Software Proposal

** Description

   The SmartCage system allows mice to perform voluntary head-fixations in their
   home cages to facilitate behavior training and experiments without human
   supervision.

** Overview

   A researcher manages a set of SmartCages and mice, setting up behavior
   training or experiments which will run automatically and independently on
   each SmartCage. The researcher may monitor the set of SmartCages remotely or
   in-person and intervene if needed, but direct supervision is not necessary
   for operation.

   Each SmartCage contains a mouse with a headbar and consists of a typical
   mouse cage with a tunnel module and task module attached. The tunnel module
   has sensors for detecting the mouse position and motion and motorized latches
   for head-fixing the mouse. The task module has sensors for collecting data
   and actuators for interacting with the mouse.

   A SmartCage runs a course of training or experiments lasting approximately
   one month. A course is a series of sessions, one session per day, each
   session lasting about half a day. A session is a series of trials, each trial
   typically lasting somewhere between half a minute to half an hour.

   Control and data collection in the SmartCage system is handled by a variety
   of hardware and software components, communicating with each other to
   coordinate. Examples of SmartCage system hardware and software components
   include Linux single board computers running Python, C++, Docker, ROS, and
   webservers, Phidgets sensor and actuator controllers, Windows computers
   running Matlab Bpod or MacOS computers running PyBpod rodent behavior
   measurement and control devices.

** Svoboda Lab Software Request

*** Matlab Bpod

    - integrate the existing Python and Matlab scripts
    - easily communicate between Matlab code (Bpod) and Python code (SmartCage)
      using the Robot Operating System (ROS)
    - create a GUI to quickly browse through/monitor all the mice training
      states
    - alarm systems to notify users when either component crashes or mice do not
      perform well
    - want to be able to have multiple mice automatically train themselves
    - want to monitor their health/training remotely 24/7

*** Python Bpod

    - provide example code showing the PyBpod scripts can control the SmartCage
      (e.g. lickport positions, latching) via ROS
    - alarm systems to notify users when either component crashes or mice do not
      perform well

** Details

   A SmartCage consists of a regular mouse cage with a hole cut into it and a
   tunnel module attached to it. A variety of task modules may be attached to
   the tunnel module.

   The tunnel module contains two latches at the end of the tunnel farthest from
   the cage, one on the mouse's left side when facing out of the tunnel and the
   other on the right side. Each latch has a home switch, which is triggered
   when the latch is fully open, and a headbar switch, which is triggered when
   the mouse presses its headbar into it. A sensor on the floor of the tunnel
   measures the force the head-fixed mouse applies to the floor when it presses
   down upon it. The tunnel module also contains a digital output for
   communicating with other electronic hardware in the system, such as Bpod, and
   a digital input which can be connected to an emergency stop switch.

   The first task module to be developed for the Svoboda Lab is a motorized
   lickport used for dispensing water to the mouse at various positions and for
   sensing mouse licks. The lickport contains three motors, each with its own
   home switch, for moving the lickport in three orthogonal directions. The
   lickport module may contain multiple lickports, each with a solenoid valve
   for dispensing water and a sensor for detecting licks.

   A SmartCage runs a course of training or experiments lasting approximately
   one month. Each SmartCage contains a single mouse and only that mouse is in
   the cage for the entire course.

   Each SmartCage contains three cameras, one viewing the mouse from the front
   when it is latched in the tunnel, one viewing the side, and the third viewing
   the top. Images are both streamed and saved from the cameras all day and
   night during the entire course.

   A set of SmartCages may run their courses simultaneously, but independently,
   of one another. Each SmartCage course may start or stop according to its own
   schedule, which may not necessarily be synchronized with the courses running
   on other SmartCages in the set.

   Each course consists of a set of sessions. One, and only one, session runs on
   each day of the course for part of the day. The cameras and lickport motors
   may be active all day, but the latches and other sensors may only be active
   during the session. If a session is aborted before it is scheduled to end it
   may be restarted if the session end date and time have not passed.

   Each session consists of a series of trials. Each trial may be as short as a
   few seconds or as long as half an hour or so.

   The researcher sets the time of day to start the session and the maximum
   duration of the session for that day. A typical session duration might be 12
   hours. The researcher also sets the maximum number of trials per session, for
   example 800 trials per session. The trial counter resets to zero at the start
   of every session and is incremented at the start of every new trial,
   regardless of whether the previous trial ended successfully or not.

   A session ends when either the maximum duration of the session is
   exceeded or the maximum number of trials set for the session is exceeded or
   if the session is aborted in software, whichever comes first.

   A new trial is started when the mouse enters the tunnel from the cage and
   triggers one or both of the headbar sensors, depending on the researcher
   setting, at the end of the tunnel. When a new trial is started, the digital
   output signals a square wave at some acceptable frequency until the trial
   ends. When a session or trial is not active, the digital output line will
   remain low.

   The tunnel module may be in one of two modes, latch mode true and latch mode
   false. When the latch mode is true, the start of the trial causes the latches
   to close and remain closed until the end of the trial. When latch mode is
   false, the latches never close.

   The latch mode will be specified before a session starts, but the latch mode
   may be changed by a software command while the session is running. Changing
   the latch mode will take effect at the start of the next trial in the
   session.

   The latch mode will typically be false for some number of sessions at the
   beginning of a course. After that number of sessions has been exceeded, the
   remaining sessions will typically have latch mode set to true until the end
   of the course.

   When the latch mode is false, the trial ends as soon as both headbar sensors
   are unpressed. The digital output will be active during the trial. The floor
   sensor measurements and the abort signals, from either a software command or
   an emergency stop switch press, will all be ignored. A new trial may begin
   immediately after the end of a previous trial when one or both of the headbar
   sensors are pressed, depending on the researcher setting. All trials will be
   considered successful.

   When the latch mode is true, the trial ends when either the latch duration is
   exceeded, when the floor sensor threshold is exceeded, or if the trial is
   aborted from either a software command or an emergency stop switch press. A
   trial is considered successful if the latch duration is exceeded and
   considered a failure otherwise.

   When a trial is aborted by a software command it means the mouse was
   exhibiting bad performance during the trial.

   The tunnel floor sensor threshold will be specified before a session starts,
   but the threshold may be changed by a software command while the session is
   running. Changing the threshold value will take effect immediately, even if
   it occurs in the middle of a trial.

   The latch duration will be taken from an array of latch durations specified
   when starting a course. The first time the latch mode is set to true, the
   latch duration used for the next trial will be the first element in the latch
   duration array. If the trial is considered a success, then the next latch
   duration will be set to the next value in the latch duration array. If there
   are no more elements in the latch duration array, the last value of the array
   will be used for all following trials in the course. If the trial is
   considered a failure, then the latch duration from the failed trial will be
   used again and the latch duration array index will not be incremented.

   The lickport 3-axis position may be changed at any time during a course with
   a software command. When a course is not running, the lickport will be
   disabled and software commands will be ignored until a new course starts.

   A watchdog will be used to detect external software crashes. Software
   messages must be sent regularly to the watchdog. If the watchdog does not
   receive a message within a period of time set by the researcher, then the
   watchdog assumes the external software has crashed or become unresponsive.

   An alarm system will trigger an alarm when it detects a problem. Triggering
   an alarm opens the latches, if possible, ends the current trial and session,
   if they are running, and sends an email to the researcher.

   An alarm will be triggered if the watchdog detects an external software
   crash. An alarm will be triggered at the end of a session if no trials were
   started in the entire session. An alarm will be triggered if both headbar
   sensors become unpressed while the latches are closed. Alarms may be
   triggered by external software commands. For example, if external software
   determines that the mouse has bad performance, then it may send a command to
   the alarm system, triggering an alarm and supplying a message to be included
   in the alarm email.

   A GUI will display must be able to communicate with all SmartCages in a
   researcher's set and must be accessable remotely. The GUI will display
   information, but will not be able to send commands to the SmartCages. The GUI
   may need information from external software, for example the amount of water
   that the mouse has consumed, so that information must be communicated
   regularly to the GUI in order for it to be displayed.

** Operation

   When first powering up the SmartCage, the software will start running and
   wait idly for messages from external software. All messages from external
   software to the SmartCage will be ignored except for a message to start a
   course.

   A GUI will be running independently from all SmartCages in the researcher's
   set. It may receive messages at any time from any of the SmartCages and from
   external software. It must be accessible remotely at any time, so most likely
   will be a webpage hosted on a webpage server.

   Starting a course requires sending a message to a particular SmartCage,
   specifying the name of the mouse that will be living in the cage for the
   duration of the course, the array of latch durations with units of seconds,
   the width of the camera images, the height of the camera images, and the
   framerate of cameras. All cameras will have the same width, height, and
   framerate.

   When a course is started, the latches are homed and left open, but disabled,
   the digital output is set low, and the lickport motors are homed, left at the
   3-axis home position, and enabled to move when the lickport receives software
   commands.

   A directory is created to save data collected during the course. The top
   level directory will be the same name as the mouse, so weird characters
   should not be used in the mouse name. Within the mouse directory, the next
   level directory will be the number of courses that mouse has completed,
   starting at 0. Information about the course will be saved into a text file
   and current state of the course will be saved in another text file in the
   course directory.

   A lickport position text file in the course directory will be used to store
   lickport positions commanded during the course along with date and
   timestamps.

   Within the course directory, another directory will be created to save the
   camera images. Within the images directory, one directory will be created for
   each camera. The software may not be able to differentiate which camera
   belongs to which view, so the directories will be arbitrarily named. The
   researcher will then later need to figure out which camera belongs to which
   view by looking at the images. The software will begin saving images from the
   cameras as soon as the course is started. Only images that differ
   significantly from previous images will be saved to reduce disk usage. Date
   and time stamps will be used to name each image. All messages from external
   software will be ignored except for a message to create a new session.

   Creating a new session requires sending a message to a particular SmartCage
   that is actively running a course, specifying the session start date and time
   (year, month, day, hour, and minute) and the session duration in hours, the
   tunnel floor sensor threshold, the latch mode, and whether or not both
   headbar sensors are required to start a new trial. Sessions should be created
   with start and end date and times that are in the future. Sessions may be
   created that have start date and times that are in the past as long as their
   end date and times are in the future. Sessions with end date and times that
   are in the past will be ignored. If the session end date and time is in the
   future and the start date and time is in the past, the session will begin
   immediately and the maximum session duration will be the end date and time
   minus the current date and time.

   Sessions are started automatically on their start date and time. When a
   session starts, a new directory is created in the course directory, named
   after the number of sessions the mouse has completed in this course, starting
   at 0. Information about the session will be saved into a text file and
   current state of the session will be saved in another text file in the
   session directory.

   When a session is started, the tunnel headbar switches and tunnel digital
   output are enabled. Data collected during each trial are saved into a data
   text file in the session directory.

** Data Directory Structure

   Example data directory structure for a mouse named hc34:

   #+BEGIN_VERSE
smart-cage-data/
└── hc34
    └── course-000
        ├── course-info.json
        ├── course-state.json
        ├── images
        │   ├── camera-000
        │   │   ├── 2020-04-02-10-20-58-960818.png
        │   │   └── 2020-04-02-10-20-62-546872.png
        │   ├── camera-001
        │   │   ├── 2020-04-02-10-20-58-965781.png
        │   │   └── 2020-04-02-10-20-62-891765.png
        │   └── camera-002
        │       ├── 2020-04-02-10-20-59-178923.png
        │       └── 2020-04-02-10-20-62-957638.png
        ├── lickport-positions.txt
        ├── session-000
        │   ├── session-info.json
        │   ├── session-state.json
        │   └── trial-data.txt
        └── session-001
            ├── session-info.json
            ├── session-state.json
            └── trial-data.txt
   #+END_VERSE

** Matlab and Bpod Details

   ???

** Architecture

   Software in the SmartCage system will be organized as a set of ROS nodes.

   An Ethernet LAN will connect all SmartCages in the set.

   Each SmartCage will contain at least one single board computer running Linux
   and Docker connected to the Ethernet LAN with a unique IP address.

   Each SmartCage will be assigned a unique number in the set. This number will
   be used to differentiate SmartCages from one another.

   Separately each SmartCage may also contain a computer running Windows and
   Matlab to control a Bpod device. The Windows computer may be connected to the
   Linux single board directly using Ethernet over USB or the Windows computer
   may be connected to the Ethernet LAN with its own unique IP address.

   A separate Linux single board computer may be connected to the Ethernet LAN
   to run a node to control the set of SmartCages and host the GUI webserver.
   This computer may also have multiple Ethernet ports to be used as a router to
   connected to Ethernet WAN.

*** SmartCageSetController Node

    One instance of this ROS node will run independently from all SmartCages,
    either on one of the cages or on a separate Linux single board computer
    connected to the Ethernet LAN.

    This node will collect data from all of the SmartCages and may also allow a
    research to manage SmartCages within the set.

*** SmartCageSetDataWriter Node

    One instance of this ROS node will run independently from all SmartCages,
    either on one of the cages or on a separate Linux single board computer
    connected to the Ethernet LAN.

    This node will manage data from the SmartCages, transferring and backing up
    data stored locally on each cage to a common network location at regular
    intervals.

*** GUI Node

    One instance of this ROS node will run independently from all SmartCages,
    either on one of the cages or on a separate Linux single board computer
    connected to the Ethernet LAN.

    This node will pass data from the SmartCages to the webserver hosting the
    GUI webpage.

*** Alarm Node

    One instance of this ROS node will run independently from all SmartCages,
    either on one of the cages or on a separate Linux single board computer
    connected to the Ethernet LAN.

    This node will send email to the research when an alarm has been triggered.

*** SmartCageController Node

    One instance of this ROS node will run on each of the SmartCages.

    This node will manage the starting and stopping of courses on the SmartCage
    and the creation and running of sessions.

    This node will save data about the courses and sessions into the data
    directories.

*** Camera Node

    One instance of this ROS node will run on each of the SmartCages for each of
    the SmartCage cameras.

    This node will connect to a camera and stream images from it.

*** CameraDataWriterNode

    One instance of this ROS node will run on each of the SmartCages for each of
    the SmartCage cameras.

    This node will save images from its associated camera stream into the data
    directory.

*** Tunnel Node

    One instance of this ROS node will run on each of the SmartCages.

    This node will manage the tunnel and all of its sensors and actuators,
    including the headbar sensors, the floor force sensor, the emergency stop
    switch, the latches, and the digital output to the Bpod.

*** TunnelDataWriter Node

    One instance of this ROS node will run on each of the SmartCages.

    This node will save trial data into a text file in the data directory.

*** Lickport Node

    One instance of this ROS node will run on each of the SmartCages.

    This node will manage the lickport linear actuator motors.

*** LickportDataWriter Node

    One instance of this ROS node will run on each of the SmartCages.

    This node will save lickport position data into a text file in the data
    directory.

*** Matlab Node

    One instance of this ROS node will run on each of the SmartCages that
    contain a Windows computer running Matlab connected to Bpod.

    This node will allow Matlab to send messages to the other components in the
    SmartCage system.

*** Watchdog Node

    One instance of this ROS node will run on each of the SmartCages that
    contain a Windows computer running Matlab connected to Bpod.

    This node will expects regular messages from the Matlab node and will
    trigger an alarm if it does not receive them.

** Time Estimates

   | task                            | hours left to complete |
   |---------------------------------+------------------------|
   | SmartCageSetController Node     |                        |
   | SmartCageSetDataWriter Node     |                        |
   | GUI Node                        |                        |
   | Alarm Node                      |                        |
   | SmartCageController Node        |                        |
   | Camera Node                     |                        |
   | CameraDataWriterNode            |                        |
   | Tunnel Node                     |                        |
   | TunnelDataWriter Node           |                        |
   | Lickport Node                   |                        |
   | LickportDataWriter Node         |                        |
   | Matlab Node                     |                        |
   | Watchdog Node                   |                        |
   | Setup Ethernet LAN              |                        |
   | Create Webpage GUI              |                        |
   | Docker Images to Manage Updates |                        |
   | Phidgets Drivers                |                        |
   | Camera Drivers                  |                        |
   | Testing                         |                        |
